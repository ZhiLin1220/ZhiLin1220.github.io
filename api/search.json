[{"title":"JavaScript 入门","url":"/posts/42178/","content":"\n# JavaScript\n\n## 概念及入门\n\n```text scanner\n概念\n 一种运行在客户端的脚本语言(script就是脚本的意思)\n作用\n 表单动态校验(或者密码强度的检测) 最初目的\n 网页的特性\n 服务端的开发(Node.js)\n 桌面程序\n app\n 控制硬件-物联网\n 游戏开发(cocos2d-js)\n组成\n - ECMAScript: 基础语法\n - DOM: 文档数据模型\n - BOM: 浏览器对象模型\n```\n\n## 变量\n\n```text scanner\n概念\n 本质就是内存中用来存储数据的那一块空间\n作用\n 存储变化的数据\n使用\n 1,先声明再赋值\n 2,声明的同时赋值\n特点\n 里面的数据可以修改的\n注意点\n 变量名不能以数字开头\n 严格区分大小写\n 变量名不能是关键字或者保留字\n```\n\n## 数据类型\n\n```text scanner\n作用\n 给数据进行分类,方便管理\n分类\n 基本数据类型\n  - Number: 数字型\n        - String: 字符型\n        - Boolean: 布尔型\n        - Undefined: 未定义\n        - Null: 空\n    引用数据类型\n     对象 数组\n转换\n 强制转换\n     String():将参数转成字符串\n     Number():将参数转成数值\n      注意: null 可以和数值进行转换,而undefined不可以\n     Boolean():将参数转成Boolean的结果(true和false)\n      结论: Boolean可以将任意的类型转成true或者false.0 null undefined 空字符串 可以转成fasle 其他都是true\n\n 自动转换\n     针对于+运算 规律\n      如果+两端有一端是字符,就会执行字符的拼接\n      如果+两端没有一个是字符,就会使用Number()强转,然后再进行加法运算\n```\n\n## 运算符\n\n```text scanner\n算术运算符\n + - * / %\n自增自减运算符\n ++ --\n ++在前. 先变量+1,再返回计算后的结果\n ++在后  先把变量的值返回,然后变量再加1\n 结论:不管++在前还是在后,最终变量的值都会加1\n\n比较运算符\n > < >= <= == != ===\n 结果是boolean类型\n\n逻辑运算符\n && ||  !\n 结果是boolean类型\n```\n\n```html scanner\n赋值运算符 基础 = 复合赋值运算 += -= *= /= %= 三元运算符 表达式1 ? 表达式2 :\n表达式3\n```\n\n## 选择语句\n\n```html scanner\nif :判断一个条件 if(表达式){ 语句 } if-else :判断一个条件 if(表达式){ 语句\n}else{ 语句 } if-else-if :判断多个条件 if(表达式1){ 语句1 }else if(表达式2){\n语句2 } ... else{ 语句 } switch :判断多个条件 switch(表达式){ case 值1: 语句1\nbreak case 值2: 语句2 break ... default 语句 break } 应用场景\n所有的switch语句都可以使用if语句进行改写,但是所有的if语句不一定能用switch改写\nif一般用于范围的判断,switch一般用于等值判断\n如果某个场景只有固定几个取值,可以考虑使用switch,语句层次更加清晰\n```\n\n## 循环语句\n\n```html scanner\nfor for(初始化语句;条件判断语句;循环增量语句){ 循环体语句; } 双重循环\n外层循环一次,内层要循环所有次 外层控制行数,内层控制列数 while循环 基本格式\nwhile(表达式){ 语句体 } 完整格式 初始化语句 while(条件判断语句){ 语句体\n循环增量语句 } do-while循环 基本格式 do{ 语句体 }while(表达式) 完整格式\n初始化语句 do{ 语句体 循环增量语句 }while(条件判断语句) 区别 while和for\n都是先判断条件,在执行循环体 do-while 不管条件是否成立,都会先执行一次循环体\n应用场景 循环次数确定的话,建议使用for循环,结构简单\n循环次数不确定的话,建议使用while循环\n```\n\n## 两个关键字\n\n```html scanner\ncontinue 跳过本次循环,继续下一次循环 break 终止当前循环\n```\n\n## 数组\n\n```text scanner\n概念\n 存放数据的容器,方便管理数据\n定义及初始化\n var arr = []\n var arr = [1,2,3]\n取值\n arr[0]\n修改值\n arr[0]=9\n新增\n arr[新的索引] = 值\n删除\n delete arr[索引]\n遍历\n for循环\n求和\n 思路:遍历然后累加\n求最值\n 思路:遍历 然后依次拿后面的元素 跟擂台变量进行比较\n二维数组\n 概念\n  数组的数组,本质还是一个数组,只不过里面的元素是数组\n 取值\n  arr[索引] 取到的是 里面的小数组\n  arr[索引][索引]  取到的是 具体的元素\n 遍历\n  双重循环\n```\n\n## 函数\n\n```text scanner\n概念\n 封装了一段具有特殊功能的代码块\n作用\n 方便调用\n使用\n 1,先定义\n 2,调用\n参数\n 相当于一个媒介,调用者可以把要操作的数据通过参数传递到函数内部进行操作\n 可以提高程序的灵活性\n返回值\n 相当于函数将操作完的数据返回给调用者,这样调用者就可以拿到数据进行进一步操作\n如何获取函数的参数\n 在函数内部,存在一个内置的变量arguments,是个伪数组\n分类\n 普通函数(带名字)\n 匿名函数(没有名字)\n注意\n 1,如果没有显示的调用return.则方法没有返回值\n 2,函数名其实是代表整个函数\n 3,实参的个数少于形参,多余形参赋不上值,就是undefined\n```\n\n## 面向对象\n\n```text scanner\n概念\n 面向过程:完成一件事需要多少个步骤(重点关注在步骤)\n 面向对象:完成一件事需要多少个对象(重点是在找对象)\n类\n 类是对现实生活中具有相同属性和行为的事物的一个统称 (抽象的,相当于是模板)\n对象\n 现实生活中一个具体的存在 (具体的,通过模板创建出来的)\n类和对象关系\n 类相当于是模板,对象是通过这个模板创建出来的一个个真实存在的个体\n 类中有什么,对象中就有什么\n类的三要素\n 类名\n 属性:类所具有的特征\n 行为:类所有具有的功能\n类的定义\n function 类名(参数1,参数2){\n  属性的定义\n  this.属性名1=参数1\n  this.属性名2=参数2\n  this.方法名 = function(){\n   方法体代码\n  }\n }\n对象的创建\n var 对象名 = new 类名(实际参数1,实际参数2)\n调用方法和属性\n 对象名.属性名\n 对象名.方法名\n\nnew实例化的过程(了解)\n\nthis:谁调用我,我就代表谁\n```\n\n## Math 对象\n\n```text scanner\n概念\n 数学相关的对象\n方法\n Math.PI\n Math.max(1,3,9)\n Math.min(1,3,9)\n Math.abs(-1)\n Math.ceil(1.2)\n Math.floor(1.2)\n Math.round(1.2)\n生成随机数\n Math.random() 范围[0,1)\n Math.random()*(max-min+1) + min  范围[min,max]\n```\n\n## Date 对象\n\n```text scanner\n概念\n Date 对象用于处理日期和时间。\n创建\n var myDate=new Date()\n获取年月日\n getFullYear()\n getMonth()\n getDate()\n getDay()\n获取时分秒\n getHours()\n getMinutes()\n getSeconds()\n获取毫秒值\n getTime()\n +new Date()\n```\n\n## Array 对象\n\n```text scanner\n创建\n var arr1 = []\n var arr2 = new Array()\n var arr3 = new Array(size)\n var arr4 = new Array(元素1,元素2...)\n方法\n pop()\n push()\n sort()\n reverse()\n indexOf()\n```\n\n## String 对象\n\n```text scanner\n查找\n indexOf()\n查找指定索引的字符\n charAt()\n拼接\n concat()  +\n截取\n substr()\n替换\n replace()\n```\n\n## Json 对象\n\n```text scanner\njson字符串转js对象  parse()\njs对象转json字符串 stringify\n```\n\n## ECMA 基础语法总结\n\n```text scanner\njs\n 概念\n  脚本语言\n 组成\n  ECMAScript基础语法 DOM BOM\n变量\n 概念\n  内存中存储数据的那块空间\n 使用\n  var a = 10;\n  a = 20\n  a\n数据类型\n 基本数据类型\n  字符型\n  数值型\n  Boolean型\n  null\n  undefined\n 引用数据类型\n  类 Math类 Date类 Array类\n 转换\n  强制转换\n   String()\n   Number()\n   Boolean()\n  自动转换\n   + 有一端是字符,就是拼接\n     两端都不是,使用Number()强转再运算\n运算符\n 算术运算符  + - * / %\n 自增自减运算符 ++ --\n 比较运算符  > < >= !=  结果是Boolean类型\n 逻辑运算符 && || !  结果也是Boolean类型  短路\n 赋值运算符 = += -= *=   区分=和==\n 三元运算符 表达式1?表达式2:表达式3\n流程控制\n 顺序结构\n 选择结构\n  if\n  if-else\n  if-else-if 比较多个条件\n  switch 等值判断  穿透\n 循环结构\n  for  循环次数确定\n  while  循环次数不确定,条件确定\n  do-while\n  双重for循环(了解)\n数组\n 定义\n  []\n 取值 和 赋值\n  通过索引\n 遍历\n  for\n 操作\n  求和 求最值\n函数\n 概念\n  封装了一段具有特定功能的代码块\n 定义和调用\n  先定义后调用\n 参数\n  媒介\n 返回值\n  通过return返回给调用者\n 分类\n  普通和匿名\n对象\n 面向对象 概念\n 类和对象\n 类的三要素\n 定义类\n 创建对象 new\n 调用属性和方法\n 创建对象另外一种方式 字面量\n\n内置对象\n Math\n  随机数 Math.random()\n Date\n  Date d = new Date()\n Array\n  pop()  push()\n String\n  substr() replace()\n JSON\n  parse()\n\n```\n\n## DOM 概念\n\n```text scanner\n每个载入浏览器的 HTML 文档都会成为 Document 对象。\nDocument 对象使我们可以从脚本中对 HTML 页面中的所有元素进行访问。\n\nHTML DOM 定义了访问和操作 HTML 文档的标准方法。\nDOM 将 HTML 文档表达为树结构。\nHTML DOM 定义了所有 HTML 元素的对象和属性，以及访问它们的方法。\n\n操作思想\n 就是将html页面中的所有组成部分(标签,属性,标签体,注释等)抽取成对象,用面向对象的方式来操作这些东西,因为对象中有属性和方法,比单纯操作字符串要方便的多\n\n根据 W3C 的 HTML DOM 标准，HTML 文档中的所有内容都是节点：\n 整个文档是一个文档节点\n 每个 HTML 元素是元素节点\n HTML 元素内的文本是文本节点\n 每个 HTML 属性是属性节点\n 注释是注释节点\n```\n\n## DOM 获取元素\n\n```text scanner\n获取单个元素\n getElementById(id的值)\n获取多个元素\n getElementByTagName(标签名)\n getElementByClassName(类名)\nH5新增--推荐使用\n querySelector(选择器) 第一个元素\n querySelectorAll(选择器))\n```\n\n## 事件入门\n\n```text scanner\n事件通常和js代码一起使用,可以通过事件的发生来执行一段js代码\n\n三个要素\n 1,事件源    电话                    电动车             按钮\n 2,事件      电话铃响      踹                被点了\n 3,事件处理程序  铃响之后班主任要做的事情    警报器响(监听器)    点之后弹出弹框\n\n三个步骤\n 1,写一个事件源     按钮\n 2,写一个监听器     函数\n 3,绑定事件源和监听器   用一个属性绑定按钮和监听器\n绑定（注册方式）\n    传统的注册方式：利用on开头的事件 -- onclick onkeyup\n    H5新增的监听注册方式： addEventlistnener（事件名称，匿名函数）\n\n```\n\n## DOM 操作属性\n\n```text scanner\n设置\n 元素对象.属性名 = 属性值\n获取\n 元素对象.属性名\n```\n\n## DOM 操作标签体\n\n```text scanner\n设置\n 元素对象.innerHTML = 值\n获取\n 元素对象.innerHTML\n```\n\nDOM 操作样式\n\n```text scanner\n设置\n 元素对象.style.属性名=值\n获取\n 元素对象.style.属性名\n```\n\n## 焦点事件\n\n```text scanner\nonfocus 获得焦点\nonblur 失去焦点\n\n```\n\n## 键盘事件\n\n```text scanner\nkeydown  按下\nkeyup 松开\nkeypress 按下并按着不动 (识别大小写)\n事件对象（e）\n  本身就存在的，可以给函数一个参数,在函数体里就可以使用，通过他可以获取事件的方式；可以组织标签的默认行为（跳转、提交等）；还可以获取keycode点击的按键；还可以组织事件冒泡；\n```\n\n## 事件冒泡\n\n```text scanner\n概念\n 事件开始时是由最具体的元素接收,然后逐级向上传播到DOM最顶层的节点\n阻止冒泡\n 有的情况下,我们只想让最具体的元素接收事件,而不想让事件向上传递,就可以用事件对象来阻止冒泡\n e.stopPropagation() //停止传播\n 如果浏览器的版本比较低,可以采用下面代码\n```\n\n![img](C:/Users/23361/Documents/Tencent Files/2336182340/FileRecv/day14*资料下发/day14*资料下发/笔记/day14 课程笔记.assets/9ead631b-adbe-40e8-9553-fddc78d9fec0.jpg)\n\n## 创建元素\n\n```text scanner\ncreateElement('元素名称')\n```\n\n## 节点操作\n\n```text scanner\nappendChild() 在父级节点的子节点后面追加元素\ninsertBefore() 在父级节点的子节点后面追加元素\n```\n\n## BOM 简介\n\n```text scanner\n概念\n 浏览器对象模型\n组成\n Window  窗口对象\n  Window 对象表示浏览器中打开的窗口。\n    Navigator  浏览器对象\n     Navigator 对象包含有关浏览器的信息。\n    Screen   屏幕对象\n     Screen 对象包含有关客户端显示屏幕的信息。\n    History  历史记录对象\n     History 对象包含用户（在浏览器窗口中）访问过的 URL。\n    Location  地址栏对象\n     Location 对象包含有关当前 URL 的信息。\n操作原理\n 将浏览器各个组成部分抽成对象,以面向的方式去操作,提高开发效率(对象有属性和方法,便于操作)\n```\n\n## window 对象\n\n```text scanner\n概念\n 窗口对象\n方法\n 定时器相关的\n  setTimeout 定时一次   用clearTimeout清除\n  setInterval 循环定时  用clearInterval清除\n```\n\n## location 对象\n\n```text scanner\n概念\n 用于获得当前页面的地址 (URL)，并把浏览器重定向到新的页面。\n属性\n location.href  获取\n location.href = 新的url  跳转\n方法\n reload() 刷新\n```\n\n## history 对象\n\n```text scanner\n概念\n 包含浏览器的历史\n方法\n forward()\n back()\n go()\n```\n","categories":["软件开发","Javascript"],"tags":["JavaScript"]},{"title":"Hello World","url":"/posts/undefined/","content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","categories":[],"tags":[]}]